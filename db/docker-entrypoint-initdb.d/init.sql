CREATE TABLE IF NOT EXISTS tasks (
    id SERIAL PRIMARY KEY,
    id_parent INT NOT NULL DEFAULT 0,
    
    completion INT NOT NULL DEFAULT 0,
    time_expected INT NOT NULL DEFAULT 0,
    name VARCHAR(255) NOT NULL DEFAULT '',
    description TEXT NOT NULL DEFAULT '',
    
    log_create TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    log_modify TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS work (
    id SERIAL PRIMARY KEY,
    id_task INT NOT NULL,
    
    time_started INT NOT NULL DEFAULT 0,
    time_worked INT NOT NULL DEFAULT 0,
    name VARCHAR(255) NOT NULL DEFAULT '',
    description TEXT NOT NULL DEFAULT '',
    
    log_create TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    log_modify TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);


CREATE OR REPLACE FUNCTION f_on_update()
RETURNS TRIGGER AS $$
BEGIN
    NEW.log_modify = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER t_on_update_tasks
BEFORE UPDATE ON tasks
FOR EACH ROW
EXECUTE FUNCTION f_on_update();

CREATE TRIGGER t_on_update_work
BEFORE UPDATE ON work
FOR EACH ROW
EXECUTE FUNCTION f_on_update();
